<!DOCTYPE html>
<html>
    <head>
        <link href="main.css" rel="stylesheet" type="text/css">
        <script>
            // Global array with line data
            var lineIndex = [];
            // Global array with intersection data
            var intersectionIndex = [];

            //Draw the edges of the canvas as lines
            function drawEdges()
            {
                // Draw Edges
                var canvas = document.getElementById("myCanvas");
                canvas.width = canvas.width;
                var ctx = canvas.getContext("2d");
                ctx.beginPath();
                ctx.moveTo(0, 0);
                ctx.lineTo(0, 400);
                ctx.lineTo(400, 400);
                ctx.lineTo(400, 0);
                ctx.lineTo(0, 0);
                ctx.stroke();

                // Push edgeLines to the line Index
                /*lineIndex.push([0,0,0,400]); //unsure how to handle 0 slope
                lineIndex.push([0,400,400,400,0,find_yIntercept(0,400,0)]);
                lineIndex.push([400,400,400,0]); // unsure how to handle 0 slope
                lineIndex.push([400,0,0,0,0,find_yIntercept(400,0,0)]);*/
                
                // Make Variable Coordinates
                // x,y is current mouse location
                // xi, yi is start location
                // xe, ye is end location
                var x, y, xi, yi, xe, ye;
                var size = 0;

                // line Index layout
                // 0 [xi,yi,xe,ye,slope,yInt]
                // 1 [xi,yi,xe,ye,slope,yInt]
                // 2 [xi,yi,xe,ye,slope,yInt]

                // Track variable coordinates on mousemove relevant to canvas
                canvas.onmousemove = function(event) {
                    x = event.pageX - this.offsetLeft;
                    y = event.pageY - this.offsetTop;
                }

                // function that gets called on mousedown in canvas
                canvas.addEventListener("mousedown", function(){
                    console.log('('+x+','+y+')');
                    ctx.beginPath();
                    ctx.moveTo(x,y);
                    xi = x;
                    yi = y;
                });

                // function that gets called on mouseup in canvas
                canvas.addEventListener("mouseup", function(){
                    console.log('('+x+','+y+')');
                    ctx.lineTo(x,y);
                    ctx.stroke();
                    xe = x;
                    ye = y;
                    var slope = findSlope(xi,yi,xe,ye);
                    lineIndex.push([xi,yi,xe,ye,slope,find_yIntercept(xi,yi,slope)]);
                    console.log("stored line");
                    console.log(lineIndex[size][0]);
                    console.log(lineIndex[size][1]);
                    console.log(lineIndex[size][2]);
                    console.log(lineIndex[size][3]);
                    console.log(lineIndex[size][4]);
                    console.log(lineIndex[size][5]);
                    console.log("line " + size + " added");
                    size++;
                });
            }

            // function finds and returns the slope of the line segment
            function findSlope(xi, yi, xe, ye){
                var slope = ((ye - yi)/(xe -xi));
                return slope;
            }

            function find_yIntercept(xi,yi,slope){
                var yIntercept = (yi - (slope * xi));
                return yIntercept;
            }

            function findTriangles(){
                // still need to figure this out.
                for (var i = 0; i < lineIndex.length; i++){
                    for(var j = i+1; j < lineIndex.length; j++){
                        console.log("comparing Lines " + i + j);
                        var mutualX = ((lineIndex[j][5] - lineIndex[i][5])/(lineIndex[i][4] - lineIndex[j][4]));
                        // lines if not segments would meet at mutualX
                        // mutualX is yint2 - yint1 divided by slope1 - slope2
                        var xbig;
                        var xsmall;
                        var xsame = false;

                        // this sorts out what is the range of the acceptable x values
                        if(lineIndex[i][0] > lineIndex[i][2]){
                            xbig = lineIndex[i][0];
                            xsmall = lineIndex[i][2];
                        } else if (lineIndex[i][0] == lineIndex[i][2]) {
                            xsame = true;
                        } else {
                            xbig = lineIndex[i][2];
                            xsmall = lineIndex[i][0];
                        }

                        // this compares the intersection to make sure it's part of the line segements
                        if(mutualX >= xsmall && mutualX <= xbig){
                            console.log("lines " + i + " and lines " + j + " do intersect");
                            // push intersections into an array
                            intersectionIndex.push([i,j]);
                        }
                    }
                }
                var totalTriangles = 0;
                for (var i = 0; i < intersectionIndex.length; i++){
                    for (var j = 0; j < intersectionIndex.length; j++){
                        if (intersectionIndex[j][0] == intersectionIndex[i][1]){
                            for (var k = 0; k < intersectionIndex.length; k++){
                                if (intersectionIndex[j][1] == intersectionIndex[k][1]){
                                    totalTriangles++;
                                }
                            }
                        }
                    }
                }
                console.log("totalTriangles = " + totalTriangles);
                console.log(JSON.stringify(intersectionIndex));
            }
        </script>
    </head>
    <body onload="drawEdges();">
        <!-- Navigation Bar On Top -->
        <div class="topnav">
            <a href="/">Home</a>
            <a href="/page2">Page 2</a>
            <a class="active" href="/page3">Page 3</a>
        </div>
        <h1>Draw lines to calculate triangles</h1>
        <!-- Blank Canvas -->
        <div class="boxCanvas">
            <canvas id="myCanvas" width="400" height="400"></canvas>
        </div>
        <button onclick="findTriangles();">Find triangles</button>
    </body>
</html>